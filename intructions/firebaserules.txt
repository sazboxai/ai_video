// Storage Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Profile Pictures
    match /profile_pictures/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
        && request.resource.size < 5 * 1024 * 1024 // 5MB max
        && request.resource.contentType.matches('image/.*');
    }
    
    // Exercise Videos
    match /exercise_videos/{trainerId}/{videoName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.auth.uid == trainerId
        && request.resource.size < 50 * 1024 * 1024 // 50MB max
        && request.resource.contentType.matches('video/.*');
    }
  }
}

// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Trainer Profiles
    match /trainers/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null 
        && request.auth.uid == userId;
      allow delete: if false; // Prevent profile deletion
    }
    
    // Routines
    match /routines/{routineId} {
      allow read: if request.auth != null;
      
      // Only trainers can create routines
      allow create: if request.auth != null
        && exists(/databases/$(database)/documents/trainers/$(request.auth.uid));
      
      // Only the routine owner can update/delete
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.trainerId;
        
      // Validate routine data
      function isValidRoutine() {
        let routine = request.resource.data;
        return routine.title.size() > 0 
          && routine.title.size() <= 100
          && routine.description.size() <= 500
          && routine.exercises.size() > 0;
      }
    }
    
    // Exercise Stats (if needed later)
    match /routines/{routineId}/stats/{statId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}